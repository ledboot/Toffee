// Generated by Dagger (https://google.github.io/dagger).
package com.ledboot.toffee.di.androidx

import android.app.Activity
import android.app.Fragment
import android.app.Service
import android.content.BroadcastReceiver
import android.content.ContentProvider
import dagger.MembersInjector
import dagger.android.DaggerApplication_MembersInjector
import dagger.android.DispatchingAndroidInjector
import javax.inject.Provider

class DaggerApplicationX_MembersInjector(
        private val activityInjectorProvider: Provider<DispatchingAndroidInjector<Activity>>,
        private val broadcastReceiverInjectorProvider: Provider<DispatchingAndroidInjector<BroadcastReceiver>>,
        private val fragmentInjectorProvider: Provider<DispatchingAndroidInjector<Fragment>>,
        private val serviceInjectorProvider: Provider<DispatchingAndroidInjector<Service>>,
        private val contentProviderInjectorProvider: Provider<DispatchingAndroidInjector<ContentProvider>>,
        private val androidxFragmentInjectorProvider: Provider<DispatchingAndroidInjector<androidx.fragment.app.Fragment>>) : MembersInjector<DaggerApplicationX> {

    override fun injectMembers(instance: DaggerApplicationX) {
        DaggerApplication_MembersInjector.injectActivityInjector(
                instance, activityInjectorProvider.get())
        DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
                instance, broadcastReceiverInjectorProvider.get())
        DaggerApplication_MembersInjector.injectFragmentInjector(
                instance, fragmentInjectorProvider.get())
        DaggerApplication_MembersInjector.injectServiceInjector(
                instance, serviceInjectorProvider.get())
        DaggerApplication_MembersInjector.injectContentProviderInjector(
                instance, contentProviderInjectorProvider.get())
        DaggerApplication_MembersInjector.injectSetInjected(instance)
        injectAndroidxFragmentInjector(instance, androidxFragmentInjectorProvider.get())
    }

    companion object {

        @JvmStatic
        fun create(
                activityInjectorProvider: Provider<DispatchingAndroidInjector<Activity>>,
                broadcastReceiverInjectorProvider: Provider<DispatchingAndroidInjector<BroadcastReceiver>>,
                fragmentInjectorProvider: Provider<DispatchingAndroidInjector<Fragment>>,
                serviceInjectorProvider: Provider<DispatchingAndroidInjector<Service>>,
                contentProviderInjectorProvider: Provider<DispatchingAndroidInjector<ContentProvider>>,
                androidxFragmentInjectorProvider: Provider<DispatchingAndroidInjector<androidx.fragment.app.Fragment>>): MembersInjector<DaggerApplicationX> {
            return DaggerApplicationX_MembersInjector(
                    activityInjectorProvider,
                    broadcastReceiverInjectorProvider,
                    fragmentInjectorProvider,
                    serviceInjectorProvider,
                    contentProviderInjectorProvider,
                    androidxFragmentInjectorProvider)
        }

        @JvmStatic
        fun injectAndroidxFragmentInjector(
                instance: DaggerApplicationX,
                androidxFragmentInjector: DispatchingAndroidInjector<androidx.fragment.app.Fragment>) {
            instance.androidxFragmentInjector = androidxFragmentInjector
        }
    }
}
